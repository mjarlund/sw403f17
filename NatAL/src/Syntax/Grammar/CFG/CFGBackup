Program -> Statement Statements $
Statements -> Statement Statements
Statements -> EPSILON
Statement -> DeclarationStatement NewLine
Statement -> ExpressionStatement NewLine
Statement -> SelectionStatement NewLine
Statement -> IterationStatement NewLine
DeclarationStatement -> Type Identifier BuildVarDCL DeclarationStatementPrime CombineDown
DeclarationStatement -> StructDeclarationStatement
DeclarationStatement -> ListDeclarationStatement
DeclarationStatementPrime -> FormalParameterList BuildBlock NewLine Statements ReturnStatement end Identifier BuildFuncDcl
DeclarationStatementPrime -> is Expression BuildAssign
DeclarationStatementPrime -> EPSILON
ReturnStatement -> return Expression BuildReturnStmt CombineDown NewLine
ReturnStatement -> EPSILON
StructDeclarationStatement -> structure Identifier BuildVarDCL NewLine BuildBlock StructDeclarationBlock BuildStructDeclaration CombineDown
StructDeclarationBlock -> DeclarationStatement NewLine StructDeclarationBlock
StructDeclarationBlock -> Identifier BuildIdentifier Identifier BuildStructVarDcl CombineDown NewLine StructDeclarationBlock
StructDeclarationBlock -> end Identifier
ListDeclarationStatement -> list of Type Identifier BuildVarDCL is ParameterList BuildListDeclaration CombineDown
FormalParameter -> Type Identifier BuildVarDCL BuildFParam
FormalParameter -> Identifier BuildVarDCL Identifier BuildIdentifier BuildFParam
FormalParameter -> list of Type Identifier BuildVarDCL BuildListDeclaration BuildFParam
FormalParameterList -> ( FormalParameterListBody ) BuildFormalParams
FormalParameterListBody -> FormalParameter FormalParameterListBodyPrime
FormalParameterListBody -> EPSILON
FormalParameterListBodyPrime -> , FormalParameterListBody
FormalParameterListBodyPrime -> EPSILON
Expression -> AssignmentExpressionPrime AssignmentExpression
AssignmentExpression -> is AssignmentExpressionPrime BuildAssign AssignmentExpression
AssignmentExpression -> EPSILON
AssignmentExpressionPrime -> NotExpressionPrime NotExpression
AssignmentExpressionPrime -> IOExpression
NotExpression -> not NotExpressionAppendant NotExpressionPrime BuildBoolExpr NotExpression
NotExpression -> EPSILON
NotExpressionAppendant -> equals
NotExpressionAppendant -> EPSILON
NotExpressionPrime -> OrExpressionPrime OrExpression
OrExpression -> or OrExpressionPrime BuildBoolExpr OrExpression
OrExpression -> EPSILON
OrExpressionPrime -> AndExpressionPrime AndExpression
AndExpression -> and AndExpressionPrime BuildBoolExpr AndExpression
AndExpression -> EPSILON
AndExpressionPrime -> EqualityExpressionPrime EqualityExpression
EqualityExpression -> equals EqualityExpressionPrime BuildBoolExpr EqualityExpression
EqualityExpression -> EPSILON
EqualityExpressionPrime -> RelationalExpressionPrime RelationalExpression
RelationalExpression -> below RelationalExpressionAppendant RelationalExpressionPrime BuildBoolExpr RelationalExpression
RelationalExpression -> above RelationalExpressionAppendant RelationalExpressionPrime BuildBoolExpr RelationalExpression
RelationalExpressionAppendant -> or equals
RelationalExpressionAppendant -> EPSILON
RelationalExpression -> EPSILON
RelationalExpressionPrime -> AdditiveExpressionPrime AdditiveExpression
AdditiveExpression -> + AdditiveExpressionPrime BuildBinaryExpr AdditiveExpression
AdditiveExpression -> - AdditiveExpressionPrime BuildBinaryExpr AdditiveExpression
AdditiveExpression -> EPSILON
AdditiveExpressionPrime -> MultiplicativeExpressionPrime MultiplicativeExpression
MultiplicativeExpression -> * PrimaryExpression BuildBinaryExpr MultiplicativeExpression
MultiplicativeExpression -> / PrimaryExpression BuildBinaryExpr MultiplicativeExpression
MultiplicativeExpression -> EPSILON
MultiplicativeExpressionPrime -> UnaryExpression
IOExpression -> Mode read from Identifier BuildIdentifier BuildIOExpr
IOExpression -> EPSILON
UnaryExpression -> - PrimaryExpression BuildUnaryExpr
UnaryExpression -> not PrimaryExpression BuildUnaryExpr
UnaryExpression -> PrimaryExpression
PrimaryExpression -> Identifier BuildIdentifier IdentifierAppendantOptional ProcedureCall
PrimaryExpression -> IntegerLiteral BuildValExpr
PrimaryExpression -> FloatingPointLiteral BuildValExpr
PrimaryExpression -> StringLiteral BuildValExpr
PrimaryExpression -> BooleanLiteral BuildValExpr
PrimaryExpression -> CharacterLiteral BuildValExpr
PrimaryExpression -> DigitalLiteral BuildValExpr
PrimaryExpression -> ( Expression )
ExpressionStatement -> Identifier BuildIdentifier IdentifierAppendantOptional ExpressionStatementPrime
ExpressionStatement -> Mode IOStatement BuildIOStmt CombineDown
ExpressionStatementPrime -> is Expression BuildAssign CombineDown
ExpressionStatementPrime -> ParameterList BuildFuncCall CombineDown
ExpressionStatementPrime -> Identifier BuildStructVarDcl CombineDown
IOStatement ->  write Expression to Identifier BuildIdentifier
IOStatement ->  read from Identifier BuildIdentifier
ProcedureCall -> ParameterList BuildFuncCall
ProcedureCall -> EPSILON
Parameter -> Expression BuildArg
IdentifierAppendantOptional -> . Identifier BuildIdentifier BuildStructComponentSelectionExpression IdentifierAppendantOptional
IdentifierAppendantOptional -> [ IntegerLiteral ] BuildListIndexExpression
IdentifierAppendantOptional -> EPSILON
ParameterList -> ( ParameterListBody ) BuildActualParams
ParameterListBody -> Parameter ParameterListBodyPrime
ParameterListBody -> EPSILON
ParameterListBodyPrime -> , ParameterListBody
ParameterListBodyPrime -> EPSILON
SelectionStatement -> if Condition BuildBlock NewLine Statements BuildIfStmt SelectionStatementPrime CombineDown
SelectionStatementPrime -> else BuildBlock NewLine Statements BuildElseStmt CombineDown end else if
SelectionStatementPrime -> end if
IterationStatement -> until Condition BuildBlock NewLine Statements BuildUntilStmt end until CombineDown
IterationStatement -> foreach ( FormalParameter in Identifier BuildIdentifier ) BuildBlock NewLine Statements BuildForeachStatement end foreach CombineDown
IterationStatement -> repeat ( Expression ) BuildBlock NewLine Statements BuildRepeatStatement end repeat CombineDown
Condition -> ( Expression )
Type -> text
Type -> number
Type -> fraction
Type -> character
Type -> boolean
Type -> void
Type -> pin
Mode -> analog
Mode -> digital
NewLine -> EOL NewLine
NewLine -> EPSILON